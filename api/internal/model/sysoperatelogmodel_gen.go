// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysOperateLogFieldNames          = builder.RawFieldNames(&SysOperateLog{})
	sysOperateLogRows                = strings.Join(sysOperateLogFieldNames, ",")
	sysOperateLogRowsExpectAutoSet   = strings.Join(stringx.Remove(sysOperateLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysOperateLogRowsWithPlaceHolder = strings.Join(stringx.Remove(sysOperateLogFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHertzdbSysOperateLogIdPrefix = "cache:hertzdb:sysOperateLog:id:"
)

type (
	sysOperateLogModel interface {
		Insert(ctx context.Context, data *SysOperateLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysOperateLog, error)
		Update(ctx context.Context, data *SysOperateLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysOperateLogModel struct {
		sqlc.CachedConn
		table string
	}

	SysOperateLog struct {
		Id             int64          `db:"id"`              // 编号
		UserName       string         `db:"user_name"`       // 用户名
		Operation      string         `db:"operation"`       // 用户操作
		Method         string         `db:"method"`          // 请求方法
		RequestParams  string         `db:"request_params"`  // 请求参数
		ResponseParams sql.NullString `db:"response_params"` // 响应参数
		Time           int64          `db:"time"`            // 执行时长(毫秒)
		Ip             sql.NullString `db:"ip"`              // IP地址
		OperationTime  time.Time      `db:"operation_time"`  // 操作时间
	}
)

func newSysOperateLogModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysOperateLogModel {
	return &defaultSysOperateLogModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_operate_log`",
	}
}

func (m *defaultSysOperateLogModel) Delete(ctx context.Context, id int64) error {
	hertzdbSysOperateLogIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysOperateLogIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hertzdbSysOperateLogIdKey)
	return err
}

func (m *defaultSysOperateLogModel) FindOne(ctx context.Context, id int64) (*SysOperateLog, error) {
	hertzdbSysOperateLogIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysOperateLogIdPrefix, id)
	var resp SysOperateLog
	err := m.QueryRowCtx(ctx, &resp, hertzdbSysOperateLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysOperateLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysOperateLogModel) Insert(ctx context.Context, data *SysOperateLog) (sql.Result, error) {
	hertzdbSysOperateLogIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysOperateLogIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysOperateLogRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.RequestParams, data.ResponseParams, data.Time, data.Ip, data.OperationTime)
	}, hertzdbSysOperateLogIdKey)
	return ret, err
}

func (m *defaultSysOperateLogModel) Update(ctx context.Context, data *SysOperateLog) error {
	hertzdbSysOperateLogIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysOperateLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysOperateLogRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.UserName, data.Operation, data.Method, data.RequestParams, data.ResponseParams, data.Time, data.Ip, data.OperationTime, data.Id)
	}, hertzdbSysOperateLogIdKey)
	return err
}

func (m *defaultSysOperateLogModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHertzdbSysOperateLogIdPrefix, primary)
}

func (m *defaultSysOperateLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysOperateLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysOperateLogModel) tableName() string {
	return m.table
}
