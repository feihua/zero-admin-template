// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheHertzdbSysUserIdPrefix     = "cache:hertzdb:sysUser:id:"
	cacheHertzdbSysUserMobilePrefix = "cache:hertzdb:sysUser:mobile:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysUser, error)
		FindOneByMobile(ctx context.Context, mobile string) (*SysUser, error)
		Update(ctx context.Context, data *SysUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		Id         int64          `db:"id"`          // 主键
		Mobile     string         `db:"mobile"`      // 手机
		UserName   string         `db:"user_name"`   // 姓名
		Password   string         `db:"password"`    // 密码
		StatusId   int64          `db:"status_id"`   // 状态(1:正常，0:禁用)
		Sort       int64          `db:"sort"`        // 排序
		Remark     sql.NullString `db:"remark"`      // 备注
		CreateTime time.Time      `db:"create_time"` // 创建时间
		UpdateTime sql.NullTime   `db:"update_time"` // 修改时间
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	hertzdbSysUserIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserIdPrefix, id)
	hertzdbSysUserMobileKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, hertzdbSysUserIdKey, hertzdbSysUserMobileKey)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id int64) (*SysUser, error) {
	hertzdbSysUserIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserIdPrefix, id)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, hertzdbSysUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByMobile(ctx context.Context, mobile string) (*SysUser, error) {
	hertzdbSysUserMobileKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserMobilePrefix, mobile)
	var resp SysUser
	err := m.QueryRowIndexCtx(ctx, &resp, hertzdbSysUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", sysUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	hertzdbSysUserIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserIdPrefix, data.Id)
	hertzdbSysUserMobileKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Mobile, data.UserName, data.Password, data.StatusId, data.Sort, data.Remark)
	}, hertzdbSysUserIdKey, hertzdbSysUserMobileKey)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	hertzdbSysUserIdKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserIdPrefix, data.Id)
	hertzdbSysUserMobileKey := fmt.Sprintf("%s%v", cacheHertzdbSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Mobile, newData.UserName, newData.Password, newData.StatusId, newData.Sort, newData.Remark, newData.Id)
	}, hertzdbSysUserIdKey, hertzdbSysUserMobileKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheHertzdbSysUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
