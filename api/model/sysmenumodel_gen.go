// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`gmt_create`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheZeroReactSysMenuIdPrefix = "cache:zeroReact:sysMenu:id:"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenu, error)
		FindAll(ctx context.Context, menuName string) (*[]SysMenu, error)
		FindAllByUserId(ctx context.Context, userId int64) (*[]SysMenu, error)
		Count(ctx context.Context) (int64, error)
		Update(ctx context.Context, data *SysMenu) error
		UpdateMenuStatus(ctx context.Context, id int64, statusId int64) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysMenuModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenu struct {
		Id          int64          `db:"id"`           // 主键
		GmtCreate   time.Time      `db:"gmt_create"`   // 创建时间
		GmtModified time.Time      `db:"gmt_modified"` // 修改时间
		StatusId    int64          `db:"status_id"`    // 状态(1:正常，0:禁用)
		Sort        int64          `db:"sort"`         // 排序
		ParentId    int64          `db:"parent_id"`    // 父ID
		MenuName    string         `db:"menu_name"`    // 菜单名称
		MenuUrl     string         `db:"menu_url"`     // 路由路径
		ApiUrl      string         `db:"api_url"`      // 接口URL
		MenuIcon    sql.NullString `db:"menu_icon"`    // 菜单图标
		Remark      sql.NullString `db:"remark"`       // 备注
		MenuType    int64          `db:"menu_type"`    // 菜单类型(1：目录   2：菜单   3：按钮)
	}
)

func newSysMenuModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id int64) error {
	zeroReactSysMenuIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroReactSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id int64) (*SysMenu, error) {
	zeroReactSysMenuIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, id)
	var resp SysMenu
	err := m.QueryRowCtx(ctx, &resp, zeroReactSysMenuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) FindAll(ctx context.Context, menuName string) (*[]SysMenu, error) {

	query := fmt.Sprintf("select %s from %s order by id", sysMenuRows, m.table)
	var resp []SysMenu
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) FindAllByUserId(ctx context.Context, userId int64) (*[]SysMenu, error) {

	query := "select sm.* from sys_role_user sur left join sys_role sr on sur.role_id = sr.id left join sys_menu_role srm on sr.id = srm.role_id left join sys_menu sm on srm.menu_id = sm.id where sur.user_id = ? order by sm.id"
	var resp []SysMenu
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Count(ctx context.Context) (int64, error) {
	query := fmt.Sprintf("select count(*) as count from %s", m.table)

	var count int64
	err := m.QueryRowsNoCacheCtx(ctx, &count, query)

	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	zeroReactSysMenuIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.ParentId, data.MenuName, data.MenuUrl, data.ApiUrl, data.MenuIcon, data.Remark, data.MenuType)
	}, zeroReactSysMenuIdKey)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	zeroReactSysMenuIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GmtModified, data.StatusId, data.Sort, data.ParentId, data.MenuName, data.MenuUrl, data.ApiUrl, data.MenuIcon, data.Remark, data.MenuType, data.Id)
	}, zeroReactSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) UpdateMenuStatus(ctx context.Context, id int64, statusId int64) error {
	zeroReactSysMenuIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set status_id = ? ,gmt_modified = ? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, statusId, time.Now(), id)
	}, zeroReactSysMenuIdKey)
	return err
}

func (m *defaultSysMenuModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroReactSysMenuIdPrefix, primary)
}

func (m *defaultSysMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
