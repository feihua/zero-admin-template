// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuRoleFieldNames          = builder.RawFieldNames(&SysMenuRole{})
	sysMenuRoleRows                = strings.Join(sysMenuRoleFieldNames, ",")
	sysMenuRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysMenuRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheZeroReactSysMenuRoleIdPrefix = "cache:zeroReact:sysMenuRole:id:"
)

type (
	sysMenuRoleModel interface {
		Insert(ctx context.Context, data *SysMenuRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenuRole, error)
		FindAllByRoleId(ctx context.Context, roleId int64) ([]int64, error)
		Update(ctx context.Context, data *SysMenuRole) error
		Delete(ctx context.Context, id int64) error
		DeleteByRoleId(ctx context.Context, id int64) error
	}

	defaultSysMenuRoleModel struct {
		sqlc.CachedConn
		table string
	}

	SysMenuRole struct {
		Id          int64     `db:"id"`           // 主键
		GmtCreate   time.Time `db:"gmt_create"`   // 创建时间
		GmtModified time.Time `db:"gmt_modified"` // 修改时间
		StatusId    int64     `db:"status_id"`    // 状态(1:正常，0:禁用)
		Sort        int64     `db:"sort"`         // 排序
		MenuId      int64     `db:"menu_id"`      // 菜单ID
		RoleId      int64     `db:"role_id"`      // 角色ID
	}
)

func newSysMenuRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysMenuRoleModel {
	return &defaultSysMenuRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_menu_role`",
	}
}

func (m *defaultSysMenuRoleModel) Delete(ctx context.Context, id int64) error {
	zeroReactSysMenuRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuRoleIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroReactSysMenuRoleIdKey)
	return err
}

func (m *defaultSysMenuRoleModel) DeleteByRoleId(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where role_id = ?", m.table)
	_, err := m.ExecNoCacheCtx(ctx, query, id)
	return err
}

func (m *defaultSysMenuRoleModel) FindOne(ctx context.Context, id int64) (*SysMenuRole, error) {
	zeroReactSysMenuRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuRoleIdPrefix, id)
	var resp SysMenuRole
	err := m.QueryRowCtx(ctx, &resp, zeroReactSysMenuRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuRoleModel) FindAllByRoleId(ctx context.Context, roleId int64) ([]int64, error) {

	query := fmt.Sprintf("select menu_id from %s where role_id = ?", m.table)
	var resp []int64
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, roleId)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return resp, err
	}
}

func (m *defaultSysMenuRoleModel) Insert(ctx context.Context, data *SysMenuRole) (sql.Result, error) {
	zeroReactSysMenuRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysMenuRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.MenuId, data.RoleId)
	}, zeroReactSysMenuRoleIdKey)
	return ret, err
}

func (m *defaultSysMenuRoleModel) Update(ctx context.Context, data *SysMenuRole) error {
	zeroReactSysMenuRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysMenuRoleIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.MenuId, data.RoleId, data.Id)
	}, zeroReactSysMenuRoleIdKey)
	return err
}

func (m *defaultSysMenuRoleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroReactSysMenuRoleIdPrefix, primary)
}

func (m *defaultSysMenuRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysMenuRoleModel) tableName() string {
	return m.table
}
