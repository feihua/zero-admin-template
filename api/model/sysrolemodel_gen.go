// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleFieldNames          = builder.RawFieldNames(&SysRole{})
	sysRoleRows                = strings.Join(sysRoleFieldNames, ",")
	sysRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`gmt_create`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheZeroReactSysRoleIdPrefix       = "cache:zeroReact:sysRole:id:"
	cacheZeroReactSysRoleRoleNamePrefix = "cache:zeroReact:sysRole:roleName:"
)

type (
	sysRoleModel interface {
		Insert(ctx context.Context, data *SysRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRole, error)
		FindOneByRoleName(ctx context.Context, roleName string) (*SysRole, error)
		FindAllByUserId(ctx context.Context, userId int64) (*[]SysRole, error)
		FindAll(ctx context.Context, Current int64, PageSize int64, roleName string, statusId string) (*[]SysRole, error)
		Count(ctx context.Context, roleName string, statusId string) (int64, error)
		Update(ctx context.Context, data *SysRole) error
		UpdateRoleStatus(ctx context.Context, id int64, statusId int64) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysRoleModel struct {
		sqlc.CachedConn
		table string
	}

	SysRole struct {
		Id          int64     `db:"id"`           // 主键
		GmtCreate   time.Time `db:"gmt_create"`   // 创建时间
		GmtModified time.Time `db:"gmt_modified"` // 修改时间
		StatusId    int64     `db:"status_id"`    // 状态(1:正常，0:禁用)
		Sort        int64     `db:"sort"`         // 排序
		RoleName    string    `db:"role_name"`    // 名称
		Remark      string    `db:"remark"`       // 备注
	}
)

func newSysRoleModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysRoleModel {
	return &defaultSysRoleModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_role`",
	}
}

func (m *defaultSysRoleModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	zeroReactSysRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, id)
	zeroReactSysRoleRoleNameKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleRoleNamePrefix, data.RoleName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroReactSysRoleIdKey, zeroReactSysRoleRoleNameKey)
	return err
}

func (m *defaultSysRoleModel) FindOne(ctx context.Context, id int64) (*SysRole, error) {
	zeroReactSysRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, id)
	var resp SysRole
	err := m.QueryRowCtx(ctx, &resp, zeroReactSysRoleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) FindOneByRoleName(ctx context.Context, roleName string) (*SysRole, error) {
	zeroReactSysRoleRoleNameKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleRoleNamePrefix, roleName)
	var resp SysRole
	err := m.QueryRowIndexCtx(ctx, &resp, zeroReactSysRoleRoleNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `role_name` = ? limit 1", sysRoleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, roleName); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) FindAllByUserId(ctx context.Context, userId int64) (*[]SysRole, error) {

	query := "select sr.* from sys_role_user sur left join sys_role sr on sur.role_id = sr.id  where sur.user_id = ? order by sr.id"
	var resp []SysRole
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) FindAll(ctx context.Context, Current int64, PageSize int64, roleName string, statusId string) (*[]SysRole, error) {

	roleName = strings.TrimSpace(roleName)
	status, _ := strconv.Atoi(statusId)

	var query string
	if len(roleName) == 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select %s from %s limit ?,?", sysRoleRows, m.table)
	} else if len(roleName) != 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select %s from %s where role_name like '%%%s%%' limit ?,?", sysRoleRows, m.table, roleName)
	} else if len(roleName) == 0 && len(statusId) != 0 {
		query = fmt.Sprintf("select %s from %s where status_id = %d limit ?,?", sysRoleRows, m.table, status)
	} else {
		query = fmt.Sprintf("select %s from %s where role_name like '%%%s%%' and status_id = %d limit ?,?", sysRoleRows, m.table, roleName, status)
	}

	var resp []SysRole
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) Count(ctx context.Context, roleName string, statusId string) (int64, error) {

	roleName = strings.TrimSpace(roleName)
	status, _ := strconv.Atoi(statusId)

	var query string
	if len(roleName) == 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select count(*) as count from %s", m.table)
	} else if len(roleName) != 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select count(*) as count from %s where role_name like '%%%s%%'", m.table, roleName)
	} else if len(roleName) == 0 && len(statusId) != 0 {
		query = fmt.Sprintf("select count(*) as count from %s where status_id = %d", m.table, status)
	} else {
		query = fmt.Sprintf("select count(*) as count from %s where role_name like '%%%s%%' and status_id = %d", m.table, roleName, status)
	}

	var count int64
	err := m.QueryRowNoCacheCtx(ctx, &count, query)

	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSysRoleModel) Insert(ctx context.Context, data *SysRole) (sql.Result, error) {
	zeroReactSysRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, data.Id)
	zeroReactSysRoleRoleNameKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleRoleNamePrefix, data.RoleName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysRoleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.RoleName, data.Remark)
	}, zeroReactSysRoleIdKey, zeroReactSysRoleRoleNameKey)
	return ret, err
}

func (m *defaultSysRoleModel) Update(ctx context.Context, newData *SysRole) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	zeroReactSysRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, data.Id)
	zeroReactSysRoleRoleNameKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleRoleNamePrefix, data.RoleName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GmtModified, newData.StatusId, newData.Sort, newData.RoleName, newData.Remark, newData.Id)
	}, zeroReactSysRoleIdKey, zeroReactSysRoleRoleNameKey)
	return err
}

func (m *defaultSysRoleModel) UpdateRoleStatus(ctx context.Context, id int64, statusId int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	zeroReactSysRoleIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, data.Id)
	zeroReactSysRoleRoleNameKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleRoleNamePrefix, data.RoleName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set status_id = ? ,gmt_modified = ? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, statusId, time.Now(), id)
	}, zeroReactSysRoleIdKey, zeroReactSysRoleRoleNameKey)
	return err
}

func (m *defaultSysRoleModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroReactSysRoleIdPrefix, primary)
}

func (m *defaultSysRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysRoleModel) tableName() string {
	return m.table
}
