// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleUserFieldNames          = builder.RawFieldNames(&SysRoleUser{})
	sysRoleUserRows                = strings.Join(sysRoleUserFieldNames, ",")
	sysRoleUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysRoleUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheZeroReactSysRoleUserIdPrefix = "cache:zeroReact:sysRoleUser:id:"
)

type (
	sysRoleUserModel interface {
		Insert(ctx context.Context, data *SysRoleUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRoleUser, error)
		FindAllByUserId(ctx context.Context, userId int64) (*SysRoleUser, error)
		FindAllRoleIdsByUserId(ctx context.Context, userId int64) ([]int64, error)
		Update(ctx context.Context, data *SysRoleUser) error
		Delete(ctx context.Context, id int64) error
		DeleteByUserId(ctx context.Context, id int64) error
	}

	defaultSysRoleUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysRoleUser struct {
		Id          int64     `db:"id"`           // 主键
		GmtCreate   time.Time `db:"gmt_create"`   // 创建时间
		GmtModified time.Time `db:"gmt_modified"` // 修改时间
		StatusId    int64     `db:"status_id"`    // 状态(1:正常，0:禁用)
		Sort        int64     `db:"sort"`         // 排序
		RoleId      int64     `db:"role_id"`      // 角色ID
		UserId      int64     `db:"user_id"`      // 用户ID
	}
)

func newSysRoleUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysRoleUserModel {
	return &defaultSysRoleUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_role_user`",
	}
}

func (m *defaultSysRoleUserModel) Delete(ctx context.Context, id int64) error {
	zeroReactSysRoleUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleUserIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroReactSysRoleUserIdKey)
	return err
}

func (m *defaultSysRoleUserModel) DeleteByUserId(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where user_id = ?", m.table)
	_, err := m.ExecNoCacheCtx(ctx, query, id)
	return err
}

func (m *defaultSysRoleUserModel) FindOne(ctx context.Context, id int64) (*SysRoleUser, error) {
	zeroReactSysRoleUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleUserIdPrefix, id)
	var resp SysRoleUser
	err := m.QueryRowCtx(ctx, &resp, zeroReactSysRoleUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleUserModel) FindAllByUserId(ctx context.Context, userId int64) (*SysRoleUser, error) {
	query := fmt.Sprintf("select %s from %s where user_id = ? and role_id = 1", sysRoleUserRows, m.table)

	var resp SysRoleUser
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleUserModel) FindAllRoleIdsByUserId(ctx context.Context, userId int64) ([]int64, error) {
	query := fmt.Sprintf("select role_id from %s where user_id = ?", m.table)

	var ids []int64
	err := m.QueryRowsNoCacheCtx(ctx, &ids, query, userId)
	switch err {
	case nil:
		return ids, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleUserModel) Insert(ctx context.Context, data *SysRoleUser) (sql.Result, error) {
	zeroReactSysRoleUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleUserIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, sysRoleUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.RoleId, data.UserId)
	}, zeroReactSysRoleUserIdKey)
	return ret, err
}

func (m *defaultSysRoleUserModel) Update(ctx context.Context, data *SysRoleUser) error {
	zeroReactSysRoleUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysRoleUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.RoleId, data.UserId, data.Id)
	}, zeroReactSysRoleUserIdKey)
	return err
}

func (m *defaultSysRoleUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroReactSysRoleUserIdPrefix, primary)
}

func (m *defaultSysRoleUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysRoleUserModel) tableName() string {
	return m.table
}
