// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{})
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsExpectAutoSet   = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	sysUserRowsWithPlaceHolder = strings.Join(stringx.Remove(sysUserFieldNames, "`id`", "`gmt_create`", "`create_time`", "`update_time`", "`create_at`", "`update_at`", "`password`"), "=?,") + "=?"

	cacheZeroReactSysUserIdPrefix     = "cache:zeroReact:sysUser:id:"
	cacheZeroReactSysUserMobilePrefix = "cache:zeroReact:sysUser:mobile:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysUser, error)
		FindOneByMobile(ctx context.Context, mobile string) (*SysUser, error)
		FindAll(ctx context.Context, Current int64, PageSize int64, mobile string, statusId string) (*[]SysUser, error)
		Count(ctx context.Context, mobile string, statusId string) (int64, error)
		Update(ctx context.Context, data *SysUser) error
		UpdatePassword(ctx context.Context, id int64, password string) error
		UpdateUserStatus(ctx context.Context, id int64, statusId int64) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		Id          int64          `db:"id"`           // 主键
		GmtCreate   time.Time      `db:"gmt_create"`   // 创建时间
		GmtModified time.Time      `db:"gmt_modified"` // 修改时间
		StatusId    int64          `db:"status_id"`    // 状态(1:正常，0:禁用)
		Sort        int64          `db:"sort"`         // 排序
		UserNo      int64          `db:"user_no"`      // 用户编号
		Mobile      string         `db:"mobile"`       // 手机
		RealName    string         `db:"real_name"`    // 真实姓名
		Remark      sql.NullString `db:"remark"`       // 备注
		Password    string         `db:"password"`     // 密码
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`sys_user`",
	}
}

func (m *defaultSysUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, id)
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, zeroReactSysUserIdKey, zeroReactSysUserMobileKey)
	return err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id int64) (*SysUser, error) {
	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, id)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, zeroReactSysUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindOneByMobile(ctx context.Context, mobile string) (*SysUser, error) {
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, mobile)
	var resp SysUser
	err := m.QueryRowIndexCtx(ctx, &resp, zeroReactSysUserMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", sysUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) FindAll(ctx context.Context, Current int64, PageSize int64, mobile string, statusId string) (*[]SysUser, error) {

	mobile = strings.TrimSpace(mobile)
	status, _ := strconv.Atoi(statusId)

	var query string
	if len(mobile) == 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select %s from %s limit ?,?", sysUserRows, m.table)
	} else if len(mobile) != 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select %s from %s where mobile like '%%%s%%' limit ?,?", sysUserRows, m.table, mobile)
	} else if len(mobile) == 0 && len(statusId) != 0 {
		query = fmt.Sprintf("select %s from %s where status_id = %d limit ?,?", sysUserRows, m.table, status)
	} else {
		query = fmt.Sprintf("select %s from %s where mobile like '%%%s%%' and status_id = %d limit ?,?", sysUserRows, m.table, mobile, status)
	}

	var resp []SysUser
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Count(ctx context.Context, mobile string, statusId string) (int64, error) {

	mobile = strings.TrimSpace(mobile)
	status, _ := strconv.Atoi(statusId)

	var query string
	if len(mobile) == 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select count(*) as count from %s", m.table)
	} else if len(mobile) != 0 && len(statusId) == 0 {
		query = fmt.Sprintf("select count(*) as count from %s where mobile like '%%%s%%'", m.table, mobile)
	} else if len(mobile) == 0 && len(statusId) != 0 {
		query = fmt.Sprintf("select count(*) as count from %s where status_id = %d", m.table, status)
	} else {
		query = fmt.Sprintf("select count(*) as count from %s where mobile like '%%%s%%' and status_id = %d", m.table, mobile, status)
	}

	var count int64
	err := m.QueryRowNoCacheCtx(ctx, &count, query)

	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, data *SysUser) (sql.Result, error) {
	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, data.Id)
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.GmtCreate, data.GmtModified, data.StatusId, data.Sort, data.UserNo, data.Mobile, data.RealName, data.Remark, data.Password)
	}, zeroReactSysUserIdKey, zeroReactSysUserMobileKey)
	return ret, err
}

func (m *defaultSysUserModel) Update(ctx context.Context, newData *SysUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, data.Id)
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.GmtModified, newData.StatusId, newData.Sort, newData.UserNo, newData.Mobile, newData.RealName, newData.Remark, newData.Id)
	}, zeroReactSysUserIdKey, zeroReactSysUserMobileKey)
	return err
}

func (m *defaultSysUserModel) UpdatePassword(ctx context.Context, id int64, password string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, data.Id)
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set password = ? ,gmt_modified = ?  where id = ?", m.table)
		return conn.ExecCtx(ctx, query, password, time.Now(), id)
	}, zeroReactSysUserIdKey, zeroReactSysUserMobileKey)
	return err

}

func (m *defaultSysUserModel) UpdateUserStatus(ctx context.Context, id int64, statusId int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	zeroReactSysUserIdKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, data.Id)
	zeroReactSysUserMobileKey := fmt.Sprintf("%s%v", cacheZeroReactSysUserMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set status_id = ? ,gmt_modified = ? where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, statusId, time.Now(), id)
	}, zeroReactSysUserIdKey, zeroReactSysUserMobileKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheZeroReactSysUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
